// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Limitations.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LykkelimitationsService.
    /// </summary>
    public static partial class LykkelimitationsServiceExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse IsAlive(this ILykkelimitationsService operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> IsAliveAsync(this ILykkelimitationsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postModel'>
            /// </param>
            public static LimitationCheckResult ApiLimitationsPost(this ILykkelimitationsService operations, LimitCheckRequestModel postModel = default(LimitCheckRequestModel))
            {
                return operations.ApiLimitationsPostAsync(postModel).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='postModel'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LimitationCheckResult> ApiLimitationsPostAsync(this ILykkelimitationsService operations, LimitCheckRequestModel postModel = default(LimitCheckRequestModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLimitationsPostWithHttpMessagesAsync(postModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='period'>
            /// Possible values include: 'Day', 'Month'
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static ClientData ApiLimitationsGetClientDataPost(this ILykkelimitationsService operations, LimitationPeriod period, string clientId = default(string))
            {
                return operations.ApiLimitationsGetClientDataPostAsync(period, clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='period'>
            /// Possible values include: 'Day', 'Month'
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClientData> ApiLimitationsGetClientDataPostAsync(this ILykkelimitationsService operations, LimitationPeriod period, string clientId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLimitationsGetClientDataPostWithHttpMessagesAsync(period, clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            public static void ApiLimitationsRemoveClientOperationDelete(this ILykkelimitationsService operations, string clientId = default(string), string operationId = default(string))
            {
                operations.ApiLimitationsRemoveClientOperationDeleteAsync(clientId, operationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiLimitationsRemoveClientOperationDeleteAsync(this ILykkelimitationsService operations, string clientId = default(string), string operationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiLimitationsRemoveClientOperationDeleteWithHttpMessagesAsync(clientId, operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static AccumulatedDepositsModel ApiLimitationsGetAccumulatedDepositsPost(this ILykkelimitationsService operations, string clientId = default(string))
            {
                return operations.ApiLimitationsGetAccumulatedDepositsPostAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccumulatedDepositsModel> ApiLimitationsGetAccumulatedDepositsPostAsync(this ILykkelimitationsService operations, string clientId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiLimitationsGetAccumulatedDepositsPostWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<SwiftTransferLimitation> ApiSwiftLimitationsGet(this ILykkelimitationsService operations)
            {
                return operations.ApiSwiftLimitationsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SwiftTransferLimitation>> ApiSwiftLimitationsGetAsync(this ILykkelimitationsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSwiftLimitationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limitations'>
            /// </param>
            public static void ApiSwiftLimitationsPost(this ILykkelimitationsService operations, IList<SwiftTransferLimitation> limitations = default(IList<SwiftTransferLimitation>))
            {
                operations.ApiSwiftLimitationsPostAsync(limitations).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limitations'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSwiftLimitationsPostAsync(this ILykkelimitationsService operations, IList<SwiftTransferLimitation> limitations = default(IList<SwiftTransferLimitation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSwiftLimitationsPostWithHttpMessagesAsync(limitations, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static SwiftTransferLimitation ApiSwiftLimitationsByAssetGet(this ILykkelimitationsService operations, string asset)
            {
                return operations.ApiSwiftLimitationsByAssetGetAsync(asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftTransferLimitation> ApiSwiftLimitationsByAssetGetAsync(this ILykkelimitationsService operations, string asset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSwiftLimitationsByAssetGetWithHttpMessagesAsync(asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static void ApiSwiftLimitationsByAssetDelete(this ILykkelimitationsService operations, string asset)
            {
                operations.ApiSwiftLimitationsByAssetDeleteAsync(asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSwiftLimitationsByAssetDeleteAsync(this ILykkelimitationsService operations, string asset, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSwiftLimitationsByAssetDeleteWithHttpMessagesAsync(asset, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='tierId'>
            /// </param>
            public static void ApiTiersSetTierToClientPost(this ILykkelimitationsService operations, string clientId = default(string), string tierId = default(string))
            {
                operations.ApiTiersSetTierToClientPostAsync(clientId, tierId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='tierId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTiersSetTierToClientPostAsync(this ILykkelimitationsService operations, string clientId = default(string), string tierId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTiersSetTierToClientPostWithHttpMessagesAsync(clientId, tierId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limitTotalCashInAllTime'>
            /// </param>
            /// <param name='limitTotalCashIn30Days'>
            /// </param>
            /// <param name='limitTotalCashIn24Hours'>
            /// </param>
            /// <param name='limitTotalCashOutAllTime'>
            /// </param>
            /// <param name='limitTotalCashOut30Days'>
            /// </param>
            /// <param name='limitTotalCashOut24Hours'>
            /// </param>
            /// <param name='limitCreditCardsCashInAllTime'>
            /// </param>
            /// <param name='limitCreditCardsCashIn30Days'>
            /// </param>
            /// <param name='limitCreditCardsCashIn24Hours'>
            /// </param>
            /// <param name='limitCreditCardsCashOutAllTime'>
            /// </param>
            /// <param name='limitCreditCardsCashOut30Days'>
            /// </param>
            /// <param name='limitCreditCardsCashOut24Hours'>
            /// </param>
            /// <param name='limitSwiftCashInAllTime'>
            /// </param>
            /// <param name='limitSwiftCashIn30Days'>
            /// </param>
            /// <param name='limitSwiftCashIn24Hours'>
            /// </param>
            /// <param name='limitSwiftCashOutAllTime'>
            /// </param>
            /// <param name='limitSwiftCashOut30Days'>
            /// </param>
            /// <param name='limitSwiftCashOut24Hours'>
            /// </param>
            /// <param name='limitCryptoCashInAllTime'>
            /// </param>
            /// <param name='limitCryptoCashIn30Days'>
            /// </param>
            /// <param name='limitCryptoCashIn24Hours'>
            /// </param>
            /// <param name='limitCryptoCashOutAllTime'>
            /// </param>
            /// <param name='limitCryptoCashOut30Days'>
            /// </param>
            /// <param name='limitCryptoCashOut24Hours'>
            /// </param>
            /// <param name='isDefault'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='shortName'>
            /// </param>
            /// <param name='longName'>
            /// </param>
            public static void ApiTiersSaveTierPost(this ILykkelimitationsService operations, long limitTotalCashInAllTime, long limitTotalCashIn30Days, long limitTotalCashIn24Hours, long limitTotalCashOutAllTime, long limitTotalCashOut30Days, long limitTotalCashOut24Hours, long limitCreditCardsCashInAllTime, long limitCreditCardsCashIn30Days, long limitCreditCardsCashIn24Hours, long limitCreditCardsCashOutAllTime, long limitCreditCardsCashOut30Days, long limitCreditCardsCashOut24Hours, long limitSwiftCashInAllTime, long limitSwiftCashIn30Days, long limitSwiftCashIn24Hours, long limitSwiftCashOutAllTime, long limitSwiftCashOut30Days, long limitSwiftCashOut24Hours, long limitCryptoCashInAllTime, long limitCryptoCashIn30Days, long limitCryptoCashIn24Hours, long limitCryptoCashOutAllTime, long limitCryptoCashOut30Days, long limitCryptoCashOut24Hours, bool isDefault, string id = default(string), string shortName = default(string), string longName = default(string))
            {
                operations.ApiTiersSaveTierPostAsync(limitTotalCashInAllTime, limitTotalCashIn30Days, limitTotalCashIn24Hours, limitTotalCashOutAllTime, limitTotalCashOut30Days, limitTotalCashOut24Hours, limitCreditCardsCashInAllTime, limitCreditCardsCashIn30Days, limitCreditCardsCashIn24Hours, limitCreditCardsCashOutAllTime, limitCreditCardsCashOut30Days, limitCreditCardsCashOut24Hours, limitSwiftCashInAllTime, limitSwiftCashIn30Days, limitSwiftCashIn24Hours, limitSwiftCashOutAllTime, limitSwiftCashOut30Days, limitSwiftCashOut24Hours, limitCryptoCashInAllTime, limitCryptoCashIn30Days, limitCryptoCashIn24Hours, limitCryptoCashOutAllTime, limitCryptoCashOut30Days, limitCryptoCashOut24Hours, isDefault, id, shortName, longName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limitTotalCashInAllTime'>
            /// </param>
            /// <param name='limitTotalCashIn30Days'>
            /// </param>
            /// <param name='limitTotalCashIn24Hours'>
            /// </param>
            /// <param name='limitTotalCashOutAllTime'>
            /// </param>
            /// <param name='limitTotalCashOut30Days'>
            /// </param>
            /// <param name='limitTotalCashOut24Hours'>
            /// </param>
            /// <param name='limitCreditCardsCashInAllTime'>
            /// </param>
            /// <param name='limitCreditCardsCashIn30Days'>
            /// </param>
            /// <param name='limitCreditCardsCashIn24Hours'>
            /// </param>
            /// <param name='limitCreditCardsCashOutAllTime'>
            /// </param>
            /// <param name='limitCreditCardsCashOut30Days'>
            /// </param>
            /// <param name='limitCreditCardsCashOut24Hours'>
            /// </param>
            /// <param name='limitSwiftCashInAllTime'>
            /// </param>
            /// <param name='limitSwiftCashIn30Days'>
            /// </param>
            /// <param name='limitSwiftCashIn24Hours'>
            /// </param>
            /// <param name='limitSwiftCashOutAllTime'>
            /// </param>
            /// <param name='limitSwiftCashOut30Days'>
            /// </param>
            /// <param name='limitSwiftCashOut24Hours'>
            /// </param>
            /// <param name='limitCryptoCashInAllTime'>
            /// </param>
            /// <param name='limitCryptoCashIn30Days'>
            /// </param>
            /// <param name='limitCryptoCashIn24Hours'>
            /// </param>
            /// <param name='limitCryptoCashOutAllTime'>
            /// </param>
            /// <param name='limitCryptoCashOut30Days'>
            /// </param>
            /// <param name='limitCryptoCashOut24Hours'>
            /// </param>
            /// <param name='isDefault'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='shortName'>
            /// </param>
            /// <param name='longName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTiersSaveTierPostAsync(this ILykkelimitationsService operations, long limitTotalCashInAllTime, long limitTotalCashIn30Days, long limitTotalCashIn24Hours, long limitTotalCashOutAllTime, long limitTotalCashOut30Days, long limitTotalCashOut24Hours, long limitCreditCardsCashInAllTime, long limitCreditCardsCashIn30Days, long limitCreditCardsCashIn24Hours, long limitCreditCardsCashOutAllTime, long limitCreditCardsCashOut30Days, long limitCreditCardsCashOut24Hours, long limitSwiftCashInAllTime, long limitSwiftCashIn30Days, long limitSwiftCashIn24Hours, long limitSwiftCashOutAllTime, long limitSwiftCashOut30Days, long limitSwiftCashOut24Hours, long limitCryptoCashInAllTime, long limitCryptoCashIn30Days, long limitCryptoCashIn24Hours, long limitCryptoCashOutAllTime, long limitCryptoCashOut30Days, long limitCryptoCashOut24Hours, bool isDefault, string id = default(string), string shortName = default(string), string longName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTiersSaveTierPostWithHttpMessagesAsync(limitTotalCashInAllTime, limitTotalCashIn30Days, limitTotalCashIn24Hours, limitTotalCashOutAllTime, limitTotalCashOut30Days, limitTotalCashOut24Hours, limitCreditCardsCashInAllTime, limitCreditCardsCashIn30Days, limitCreditCardsCashIn24Hours, limitCreditCardsCashOutAllTime, limitCreditCardsCashOut30Days, limitCreditCardsCashOut24Hours, limitSwiftCashInAllTime, limitSwiftCashIn30Days, limitSwiftCashIn24Hours, limitSwiftCashOutAllTime, limitSwiftCashOut30Days, limitSwiftCashOut24Hours, limitCryptoCashInAllTime, limitCryptoCashIn30Days, limitCryptoCashIn24Hours, limitCryptoCashOutAllTime, limitCryptoCashOut30Days, limitCryptoCashOut24Hours, isDefault, id, shortName, longName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiTiersLoadTiersPost(this ILykkelimitationsService operations)
            {
                operations.ApiTiersLoadTiersPostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTiersLoadTiersPostAsync(this ILykkelimitationsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTiersLoadTiersPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiTiersLoadTierPost(this ILykkelimitationsService operations, string id = default(string))
            {
                operations.ApiTiersLoadTierPostAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTiersLoadTierPostAsync(this ILykkelimitationsService operations, string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTiersLoadTierPostWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
