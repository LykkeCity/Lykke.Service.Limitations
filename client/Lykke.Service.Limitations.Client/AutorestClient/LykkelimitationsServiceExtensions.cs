// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using System.Collections.Generic;

namespace Lykke.Service.Limitations.Client.AutorestClient
{
    using Lykke.Service;
    using Lykke.Service.Limitations;
    using Lykke.Service.Limitations.Client;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LykkelimitationsService.
    /// </summary>
    public static partial class LykkelimitationsServiceExtensions
    {
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IsAliveResponse ApiIsAliveGet(this ILykkelimitationsService operations)
        {
            return operations.ApiIsAliveGetAsync().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<IsAliveResponse> ApiIsAliveGetAsync(this ILykkelimitationsService operations, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='postModel'>
        /// </param>
        public static LimitationCheckResult ApiLimitationsPost(this ILykkelimitationsService operations, LimitCheckRequestModel postModel = default(LimitCheckRequestModel))
        {
            return operations.ApiLimitationsPostAsync(postModel).GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='postModel'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<LimitationCheckResult> ApiLimitationsPostAsync(this ILykkelimitationsService operations, LimitCheckRequestModel postModel = default(LimitCheckRequestModel), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.ApiLimitationsPostWithHttpMessagesAsync(postModel, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='clientId'>
        /// </param>
        /// <param name='period'>
        /// Possible values include: 'Day', 'Month'
        /// </param>
        public static ClientData ApiLimitationsGetClientDataPost(this ILykkelimitationsService operations, string clientId = default(string), string period = default(string))
        {
            return operations.ApiLimitationsGetClientDataPostAsync(clientId, period).GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='clientId'>
        /// </param>
        /// <param name='period'>
        /// Possible values include: 'Day', 'Month'
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<ClientData> ApiLimitationsGetClientDataPostAsync(this ILykkelimitationsService operations, string clientId = default(string), string period = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.ApiLimitationsGetClientDataPostWithHttpMessagesAsync(clientId, period, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IWithdrawLimit> ApiWithdrawLimitsGet(this ILykkelimitationsService operations)
            {
                return operations.ApiWithdrawLimitsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IWithdrawLimit>> ApiWithdrawLimitsGetAsync(this ILykkelimitationsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWithdrawLimitsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static void ApiWithdrawLimitsPost(this ILykkelimitationsService operations, WithdrawLimit request = default(WithdrawLimit))
            {
                operations.ApiWithdrawLimitsPostAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiWithdrawLimitsPostAsync(this ILykkelimitationsService operations, WithdrawLimit request = default(WithdrawLimit), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiWithdrawLimitsPostWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static void ApiWithdrawLimitsDelete(this ILykkelimitationsService operations, string assetId = default(string))
            {
                operations.ApiWithdrawLimitsDeleteAsync(assetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiWithdrawLimitsDeleteAsync(this ILykkelimitationsService operations, string assetId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiWithdrawLimitsDeleteWithHttpMessagesAsync(assetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            public static double? ApiWithdrawLimitsByAssetIdGet(this ILykkelimitationsService operations, string assetId)
            {
                return operations.ApiWithdrawLimitsByAssetIdGetAsync(assetId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<double?> ApiWithdrawLimitsByAssetIdGetAsync(this ILykkelimitationsService operations, string assetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWithdrawLimitsByAssetIdGetWithHttpMessagesAsync(assetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            public static void ApiLimitationsRemoveClientOperationDelete(this ILykkelimitationsService operations, string clientId = default(string), string operationId = default(string))
            {
                operations.ApiLimitationsRemoveClientOperationDeleteAsync(clientId, operationId).GetAwaiter().GetResult();
            }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='clientId'>
        /// </param>
        /// <param name='operationId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task ApiLimitationsRemoveClientOperationDeleteAsync(this ILykkelimitationsService operations, string clientId = default(string), string operationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            (await operations.ApiLimitationsRemoveClientOperationDeleteWithHttpMessagesAsync(clientId, operationId, null, cancellationToken).ConfigureAwait(false)).Dispose();   
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static IList<SwiftTransferLimitation> ApiSwiftLimitationsGet(this ILykkelimitationsService operations)
            {
                return operations.ApiSwiftLimitationsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SwiftTransferLimitation>> ApiSwiftLimitationsGetAsync(this ILykkelimitationsService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSwiftLimitationsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limitations'>
            /// </param>
            public static void ApiSwiftLimitationsPost(this ILykkelimitationsService operations, IList<SwiftTransferLimitation> limitations = default(IList<SwiftTransferLimitation>))
            {
                operations.ApiSwiftLimitationsPostAsync(limitations).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='limitations'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSwiftLimitationsPostAsync(this ILykkelimitationsService operations, IList<SwiftTransferLimitation> limitations = default(IList<SwiftTransferLimitation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSwiftLimitationsPostWithHttpMessagesAsync(limitations, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static SwiftTransferLimitation ApiSwiftLimitationsByAssetGet(this ILykkelimitationsService operations, string asset)
            {
                return operations.ApiSwiftLimitationsByAssetGetAsync(asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftTransferLimitation> ApiSwiftLimitationsByAssetGetAsync(this ILykkelimitationsService operations, string asset, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiSwiftLimitationsByAssetGetWithHttpMessagesAsync(asset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            public static void ApiSwiftLimitationsByAssetDelete(this ILykkelimitationsService operations, string asset)
            {
                operations.ApiSwiftLimitationsByAssetDeleteAsync(asset).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSwiftLimitationsByAssetDeleteAsync(this ILykkelimitationsService operations, string asset, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSwiftLimitationsByAssetDeleteWithHttpMessagesAsync(asset, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }
    }
}
