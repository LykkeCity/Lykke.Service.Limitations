// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Limitations.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ClientData
    {
        /// <summary>
        /// Initializes a new instance of the ClientData class.
        /// </summary>
        public ClientData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClientData class.
        /// </summary>
        public ClientData(IList<RemainingLimitation> remainingLimits, IList<CashOperation> cashOperations, IList<CashOperation> cashTransferOperations, IList<CurrencyOperationAttempt> operationAttempts)
        {
            RemainingLimits = remainingLimits;
            CashOperations = cashOperations;
            CashTransferOperations = cashTransferOperations;
            OperationAttempts = operationAttempts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RemainingLimits")]
        public IList<RemainingLimitation> RemainingLimits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CashOperations")]
        public IList<CashOperation> CashOperations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CashTransferOperations")]
        public IList<CashOperation> CashTransferOperations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OperationAttempts")]
        public IList<CurrencyOperationAttempt> OperationAttempts { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RemainingLimits == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RemainingLimits");
            }
            if (CashOperations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CashOperations");
            }
            if (CashTransferOperations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CashTransferOperations");
            }
            if (OperationAttempts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperationAttempts");
            }
            if (RemainingLimits != null)
            {
                foreach (var element in RemainingLimits)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (CashOperations != null)
            {
                foreach (var element1 in CashOperations)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (CashTransferOperations != null)
            {
                foreach (var element2 in CashTransferOperations)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (OperationAttempts != null)
            {
                foreach (var element3 in OperationAttempts)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
        }
    }
}
