// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Limitations.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class IClientTierLogRecord
    {
        /// <summary>
        /// Initializes a new instance of the IClientTierLogRecord class.
        /// </summary>
        public IClientTierLogRecord()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IClientTierLogRecord class.
        /// </summary>
        public IClientTierLogRecord(string dataOld, string dataNew, string changer, System.DateTime changeDate)
        {
            DataOld = dataOld;
            DataNew = dataNew;
            Changer = changer;
            ChangeDate = changeDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DataOld")]
        public string DataOld { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DataNew")]
        public string DataNew { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Changer")]
        public string Changer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ChangeDate")]
        public System.DateTime ChangeDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataOld == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataOld");
            }
            if (DataNew == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataNew");
            }
            if (Changer == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Changer");
            }
        }
    }
}
